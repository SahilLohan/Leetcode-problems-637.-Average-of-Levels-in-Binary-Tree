/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

class Solution {
public:
    void push_elements_of_same_level(vector<double>& elements,int level,int height,TreeNode* root)
    {
        if(root==nullptr) return;
        if(level==1) elements.push_back(root->val);
        else if(level>1)
        {
            push_elements_of_same_level(elements,level-1,height,root->left);
            push_elements_of_same_level(elements,level-1,height,root->right);
        }
    }
    
    int height_of_tree(TreeNode* root)
    {
        int lheight=0;
        int rheight=0;
        if(root == nullptr) return 0;
        if(root->left == nullptr && root->right == nullptr ) return 1;
        
        if(root->left != nullptr) lheight=height_of_tree(root->left);
        if(root->right != nullptr) rheight=height_of_tree(root->right);
        
        if(lheight>rheight)
            return lheight+1;
        else
            return rheight+1;
        
    }
    
    vector<double> averageOfLevels(TreeNode* root) 
    {
        double average=0;
        vector<double> elements;
        
        int height= height_of_tree(root);
        
        vector<double> result;
        if(height==0) return result;
        
        ////////////////////////////////////////
        for(int level=1;level<=height;level++)
        {
            push_elements_of_same_level(elements,level,height,root);
            // calculate average
            if(elements.size()!=0)
            {
                double sum=0;
                for(int i=0;i<elements.size();i++)
                {
                    sum += elements[i];
                }
                average = sum/elements.size();
            }
            result.push_back(average);
            elements.clear();
        
        }
        
        return result;
    }
};
